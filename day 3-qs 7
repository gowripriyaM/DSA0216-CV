import cv2
import numpy as np
import os

# Parameters for Lucas-Kanade optical flow
lk_params = dict(winSize=(15, 15),
                 maxLevel=2,
                 criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

# Load the sequence of images
image_folder = r'C:\Users\HP\Pictures\Screenshots\Screenshot (290).png'
image_files = sorted([os.path.join(image_folder, f) for f in os.listdir(image_folder) if f.endswith(('.png', '.jpg', '.jpeg'))])

# Read the first frame and convert to grayscale
first_frame = cv2.imread(image_files[0])
prev_gray = cv2.cvtColor(first_frame, cv2.COLOR_BGR2GRAY)

# Detect good features to track in the first frame
prev_points = cv2.goodFeaturesToTrack(prev_gray, maxCorners=100, qualityLevel=0.3, minDistance=7, blockSize=7)

# Create a mask image for drawing purposes
mask = np.zeros_like(first_frame)

# Iterate through the sequence of images
for i in range(1, len(image_files)):
    # Read the next frame and convert to grayscale
    frame = cv2.imread(image_files[i])
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Calculate optical flow
    next_points, status, err = cv2.calcOpticalFlowPyrLK(prev_gray, gray, prev_points, None, **lk_params)

    # Select good points
    good_new = next_points[status == 1]
    good_old = prev_points[status == 1]

    # Draw the tracks
    for j, (new, old) in enumerate(zip(good_new, good_old)):
        a, b = new.ravel()
        c, d = old.ravel()
        mask = cv2.line(mask, (a, b), (c, d), color=[0, 255, 0], thickness=2)
        frame = cv2.circle(frame, (a, b), 5, color=[0, 255, 0], thickness=-1)

    # Overlay the mask on the frame
    output = cv2.add(frame, mask)

    # Display the frame
    cv2.imshow('Optical Flow', output)
    if cv2.waitKey(30) & 0xFF == 27:
        break

    # Update the previous frame and previous points
    prev_gray = gray.copy()
    prev_points = good_new.reshape(-1, 1, 2)

cv2.destroyAllWindows()
